// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Ä–∞—Å–ª–µ–π

import { industryDatasets, IndustryTransaction } from './industry-data-generator';
import { BankStatement, ARAP, Loan, KPIMetrics, AIAnalysis, DailyForecast } from './types';
import { generateAdvancedForecast } from './generate-forecast';
import { getIndustryScenarios } from './generate-scenarios';
import { industryPresets } from './industry-presets';

export function loadIndustryData(industryId: string) {
  console.log(`üéØ loadIndustryData called with: ${industryId}`);
  console.log(`üìã Available datasets:`, Object.keys(industryDatasets));
  
  const dataset = industryDatasets[industryId as keyof typeof industryDatasets];
  
  if (!dataset) {
    console.warn(`‚ö†Ô∏è –û—Ç—Ä–∞—Å–ª—å ${industryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return null;
  }

  console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${dataset.name}`);
  
  const transactions = dataset.generateTransactions();
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç BankStatement
  const bankStatements: BankStatement[] = [];
  let runningBalance = 0;
  let idCounter = 1;
  
  transactions.forEach((t) => {
    runningBalance += t.amount;
    
    bankStatements.push({
      id: String(idCounter++),
      date: t.date,
      amount: t.amount,
      description: t.description,
      category: t.category,
      type: t.type,
      balance: runningBalance,
    });
  });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–±–∏—Ç–æ—Ä—Å–∫—É—é –∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫—É—é –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
  const arAp = generateARAPFromTransactions(transactions, dataset.name);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–π–º—ã (–µ—Å–ª–∏ –±—ã–ª–∏ –∫—Ä—É–ø–Ω—ã–µ —Ä–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
  const loans = generateLoansFromData(transactions, dataset.name);
  
  // –í—ã—á–∏—Å–ª—è–µ–º KPI –º–µ—Ç—Ä–∏–∫–∏
  const kpiMetrics = calculateKPIMetrics(bankStatements);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const industryCharacteristics = {
    seasonality: 0.5,
    volatility: 0.3,
  };
  
  // –î–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π - —Ä–∞–∑–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
  if (industryId === 'retail' || industryId === 'ecommerce') {
    industryCharacteristics.seasonality = 0.7;
    industryCharacteristics.volatility = 0.4;
  } else if (industryId === 'construction') {
    industryCharacteristics.seasonality = 0.6;
    industryCharacteristics.volatility = 0.5;
  } else if (industryId === 'services') {
    industryCharacteristics.seasonality = 0.3;
    industryCharacteristics.volatility = 0.2;
  }
  
  const forecasts = generateAdvancedForecast(bankStatements, industryCharacteristics);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏
  const scenarios = getIndustryScenarios(industryId);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏
  const preset = industryPresets.find(p => p.id === industryId);
  const financingOptions = preset?.financingOptions || [];
  
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${bankStatements.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  console.log(`   üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${(runningBalance / 1000000).toFixed(2)} –º–ª–Ω —Ä—É–±`);
  console.log(`   üìä –°–æ–±—ã—Ç–∏—è: ${dataset.events.length}`);
  console.log(`   üìà –ü—Ä–æ–≥–Ω–æ–∑: ${forecasts.length} –¥–Ω–µ–π`);
  console.log(`   üé≤ –°—Ü–µ–Ω–∞—Ä–∏–∏: ${scenarios.length}`);
  console.log(`   üí≥ –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: ${financingOptions.length} –æ–ø—Ü–∏–π`);
  
  return {
    bankStatements,
    arAp,
    loans,
    kpiMetrics,
    events: dataset.events,
    forecasts,
    scenarios,
    financingOptions,
  };
}

function generateARAPFromTransactions(transactions: IndustryTransaction[], companyName: string): ARAP[] {
  const arAp: ARAP[] = [];
  let arCounter = 1;
  let apCounter = 1;
  
  // –ë–µ—Ä–µ–º –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∏–∑ –Ω–∏—Ö –¥–µ–±–∏—Ç–æ—Ä–∫—É/–∫—Ä–µ–¥–∏—Ç–æ—Ä–∫—É
  const recentTransactions = transactions.slice(-90); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ ~3 –º–µ—Å—è—Ü–∞
  
  recentTransactions.forEach((t) => {
    // –î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å (–∫—Ä—É–ø–Ω—ã–µ –¥–æ—Ö–æ–¥—ã)
    if (t.type === 'income' && t.amount > 500000) {
      const dueDate = new Date(t.date);
      dueDate.setDate(dueDate.getDate() + 30);
      
      const paidAmount = Math.random() > 0.3 ? t.amount : t.amount * 0.7;
      
      arAp.push({
        id: `ar-${arCounter++}`,
        counterparty: getCounterpartyName(t.category, 'income'),
        type: 'receivable',
        amount: t.amount,
        paidAmount,
        dueDate: dueDate.toISOString().split('T')[0],
        status: paidAmount >= t.amount ? 'paid' : 'overdue',
      });
    }
    
    // –ö—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å (–∫—Ä—É–ø–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
    if (t.type === 'expense' && Math.abs(t.amount) > 300000) {
      const dueDate = new Date(t.date);
      dueDate.setDate(dueDate.getDate() + 20);
      
      const paidAmount = Math.random() > 0.2 ? Math.abs(t.amount) : Math.abs(t.amount) * 0.6;
      
      arAp.push({
        id: `ap-${apCounter++}`,
        counterparty: getCounterpartyName(t.category, 'expense'),
        type: 'payable',
        amount: Math.abs(t.amount),
        paidAmount,
        dueDate: dueDate.toISOString().split('T')[0],
        status: paidAmount >= Math.abs(t.amount) ? 'paid' : 'pending',
      });
    }
  });
  
  return arAp;
}

function getCounterpartyName(category: string, type: 'income' | 'expense'): string {
  if (type === 'income') {
    const clients = [
      '–û–û–û "–¢–æ—Ä–≥–æ–≤—ã–π –î–æ–º"',
      '–ò–ü –ò–≤–∞–Ω–æ–≤ –ê.–°.',
      '–û–û–û "–†–æ–∑–Ω–∏—á–Ω—ã–µ –°–µ—Ç–∏"',
      '–ü–ê–û "–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è"',
      '–ò–ü –ü–µ—Ç—Ä–æ–≤ –í.–ú.',
      '–û–û–û "–ü–∞—Ä—Ç–Ω–µ—Ä –ü–ª—é—Å"',
    ];
    return clients[Math.floor(Math.random() * clients.length)];
  } else {
    const suppliers: Record<string, string[]> = {
      '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã': ['–û–û–û "–°—Ç—Ä–æ–π–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"', '–ò–ü –°–∏–¥–æ—Ä–æ–≤', '–û–û–û "–ú–µ—Ç–¢–æ—Ä–≥"'],
      '–ó–∞–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞': ['–û–û–û "–û–ø—Ç–æ–≤–∏–∫"', '–ò–ü –ü–æ—Å—Ç–∞–≤—â–∏–∫', '–û–û–û "–¢–æ–≤–∞—Ä—ã–ü–ª—é—Å"'],
      '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': ['–û–û–û "–¢–µ—Ö–ü—Ä–æ–º"', '–ò–ü –¢–µ—Ö–Ω–∏–∫–∞', '–û–û–û "–ü—Ä–æ–º–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"'],
      '–õ–∏–∑–∏–Ω–≥': ['–ê–û "–õ–∏–∑–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"', '–û–û–û "–ê–≤—Ç–æ–õ–∏–∑–∏–Ω–≥"'],
      '–ê—Ä–µ–Ω–¥–∞': ['–û–û–û "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"', '–ò–ü –ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å'],
    };
    
    const categorySuppliers = suppliers[category] || ['–û–û–û "–ü–æ—Å—Ç–∞–≤—â–∏–∫"'];
    return categorySuppliers[Math.floor(Math.random() * categorySuppliers.length)];
  }
}

function generateLoansFromData(transactions: IndustryTransaction[], companyName: string): Loan[] {
  const loans: Loan[] = [];
  
  // –ò—â–µ–º –∫—Ä—É–ø–Ω—ã–µ —Ä–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–ø–æ–∫—É–ø–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —Ä–µ–º–æ–Ω—Ç –∏ —Ç.–¥.)
  const largeExpenses = transactions.filter(
    t => t.type === 'expense' && Math.abs(t.amount) > 1000000
  );
  
  largeExpenses.forEach((expense, index) => {
    const loanDate = new Date(expense.date);
    loanDate.setDate(loanDate.getDate() - 7); // –ó–∞–π–º –±—ã–ª –≤–∑—è—Ç –∑–∞ –Ω–µ–¥–µ–ª—é –¥–æ –ø–æ–∫—É–ø–∫–∏
    
    const maturityDate = new Date(loanDate);
    maturityDate.setMonth(maturityDate.getMonth() + 24); // –ù–∞ 2 –≥–æ–¥–∞
    
    const monthsPassed = Math.floor(
      (new Date().getTime() - loanDate.getTime()) / (1000 * 60 * 60 * 24 * 30)
    );
    
    const monthlyPayment = Math.abs(expense.amount) / 24;
    const paidAmount = monthlyPayment * Math.min(monthsPassed, 24);
    
    loans.push({
      id: `loan-${index + 1}`,
      lender: index % 2 === 0 ? '–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫' : '–ê–û –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
      amount: Math.abs(expense.amount),
      interestRate: 12 + Math.random() * 4,
      startDate: loanDate.toISOString().split('T')[0],
      maturityDate: maturityDate.toISOString().split('T')[0],
      monthlyPayment,
      remainingBalance: Math.max(0, Math.abs(expense.amount) - paidAmount),
      purpose: expense.description,
    });
  });
  
  return loans;
}

function calculateKPIMetrics(bankStatements: BankStatement[]): KPIMetrics {
  // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
  const threeMonthsAgo = new Date();
  threeMonthsAgo.setDate(threeMonthsAgo.getDate() - 90);
  
  const recentStatements = bankStatements.filter(
    s => new Date(s.date) >= threeMonthsAgo
  );
  
  const totalIncome = recentStatements
    .filter(s => s.type === 'income')
    .reduce((sum, s) => sum + s.amount, 0);
  
  const totalExpense = Math.abs(
    recentStatements
      .filter(s => s.type === 'expense')
      .reduce((sum, s) => sum + s.amount, 0)
  );
  
  const netCashFlow = totalIncome - totalExpense;
  const avgMonthlyExpense = totalExpense / 3;
  
  const currentBalance = bankStatements[bankStatements.length - 1]?.balance || 0;
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤, –±–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
  const minMonthlyExpense = Math.max(avgMonthlyExpense, 100000); // –ú–∏–Ω–∏–º—É–º 100k —Ä–∞—Å—Ö–æ–¥–æ–≤
  const runway = currentBalance / minMonthlyExpense;
  
  // Liquidity Ratio (Current Ratio approximation)
  const liquidityRatio = currentBalance / minMonthlyExpense;
  
  // Risk Score (0-100, –≥–¥–µ 100 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫)
  let riskScore = 0;
  if (runway < 3) riskScore += 40;
  else if (runway < 6) riskScore += 20;
  
  if (netCashFlow < 0) riskScore += 30;
  else if (netCashFlow < avgMonthlyExpense * 0.2) riskScore += 15;
  
  if (liquidityRatio < 1) riskScore += 30;
  else if (liquidityRatio < 2) riskScore += 10;
  
  return {
    cashFlow: Math.round(netCashFlow),
    runway: Math.round(runway * 10) / 10,
    riskScore: Math.min(100, riskScore),
    liquidityRatio: Math.round(liquidityRatio * 10) / 10,
    burnRate: Math.round(avgMonthlyExpense),
    revenue: Math.round(totalIncome),
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
export function generateAIAnalysis(
  kpiMetrics: KPIMetrics,
  industryId: string,
  events: any[]
): AIAnalysis {
  const dataset = industryDatasets[industryId as keyof typeof industryDatasets];
  
  const analysis: AIAnalysis = {
    cashFlowHealth: kpiMetrics.cashFlow > 0 ? 'good' : 'warning',
    liquidityStatus: kpiMetrics.liquidityRatio > 2 ? 'good' : kpiMetrics.liquidityRatio > 1 ? 'warning' : 'critical',
    riskLevel: kpiMetrics.riskScore < 30 ? 'low' : kpiMetrics.riskScore < 60 ? 'medium' : 'high',
    
    insights: [
      {
        type: 'cashflow',
        severity: kpiMetrics.cashFlow > 0 ? 'info' : 'warning',
        title: kpiMetrics.cashFlow > 0 ? '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫' : '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫',
        description: `–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ—Å—Ç–∞–≤–∏–ª ${(kpiMetrics.cashFlow / 1000000).toFixed(2)} –º–ª–Ω —Ä—É–±.`,
        recommendation: kpiMetrics.cashFlow < 0 
          ? '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã'
          : '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É',
      },
      {
        type: 'runway',
        severity: kpiMetrics.runway < 3 ? 'critical' : kpiMetrics.runway < 6 ? 'warning' : 'info',
        title: `Runway: ${kpiMetrics.runway} –º–µ—Å—è—Ü–µ–≤`,
        description: `–ü—Ä–∏ —Ç–µ–∫—É—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ ${kpiMetrics.runway} –º–µ—Å—è—Ü–µ–≤.`,
        recommendation: kpiMetrics.runway < 6
          ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è'
          : 'Runway –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —É—Ä–æ–≤–Ω–µ',
      },
    ],
    
    recommendations: [
      {
        category: 'financing',
        priority: kpiMetrics.cashFlow < 0 ? 'high' : 'medium',
        title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞',
        description: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞',
        expectedImpact: '+20% –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏',
        timeframe: '1-3 –º–µ—Å—è—Ü–∞',
      },
    ],
    
    forecastSummary: {
      next30Days: {
        expectedInflow: (kpiMetrics.revenue || 0) / 3,
        expectedOutflow: kpiMetrics.burnRate,
        netChange: ((kpiMetrics.revenue || 0) / 3) - kpiMetrics.burnRate,
        confidence: 0.85,
      },
      next90Days: {
        expectedInflow: kpiMetrics.revenue || 0,
        expectedOutflow: kpiMetrics.burnRate * 3,
        netChange: (kpiMetrics.revenue || 0) - (kpiMetrics.burnRate * 3),
        confidence: 0.70,
      },
    },
  };
  
  return analysis;
}

