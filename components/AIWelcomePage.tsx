'use client';

import { useState, useEffect } from 'react';
import { useAppStoreHydrated } from '@/lib/hooks';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { 
  Brain, 
  TrendingUp, 
  AlertTriangle, 
  CheckCircle, 
  ArrowRight,
  Sparkles,
  Target,
  Zap,
  BarChart3,
  Lightbulb
} from 'lucide-react';

export default function AIWelcomePage() {
  const { 
    selectedIndustry, 
    kpiMetrics, 
    aiAnalysis, 
    setCurrentPage,
    addChatMessage 
  } = useAppStoreHydrated();
  const [isAnalyzing, setIsAnalyzing] = useState(true);
  const [analysisStep, setAnalysisStep] = useState(0);

  const analysisSteps = [
    '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...',
    '–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏...',
    '–û–ø—Ä–µ–¥–µ–ª—è—é —Ä–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...',
    '–§–æ—Ä–º–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...',
    '–ì–æ—Ç–æ–≤–æ!'
  ];

  useEffect(() => {
    const timer = setInterval(() => {
      setAnalysisStep(prev => {
        if (prev < analysisSteps.length - 1) {
          return prev + 1;
        } else {
          setIsAnalyzing(false);
          clearInterval(timer);
          return prev;
        }
      });
    }, 1500);

    return () => clearInterval(timer);
  }, []);

  const handleContinue = () => {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    addChatMessage({
      id: 'welcome-1',
      role: 'assistant',
      content: `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç CFO. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–µ–Ω–µ–∂–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?`,
      timestamp: new Date().toISOString(),
      actions: [
        { id: 'forecast', label: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', action: 'forecast', icon: 'üìä' },
        { id: 'scenarios', label: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏', action: 'scenarios', icon: 'üéØ' },
        { id: 'financing', label: '–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', action: 'financing', icon: 'üí∞' },
      ]
    });
    setCurrentPage('dashboard');
  };

  const getRiskColor = (risk: number) => {
    if (risk < 30) return 'text-green-600';
    if (risk < 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getRiskLabel = (risk: number) => {
    if (risk < 30) return '–ù–∏–∑–∫–∏–π';
    if (risk < 60) return '–°—Ä–µ–¥–Ω–∏–π';
    return '–í—ã—Å–æ–∫–∏–π';
  };

  if (isAnalyzing) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="max-w-2xl w-full text-center">
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-6 rounded-3xl mb-8">
            <Brain className="h-16 w-16 text-white mx-auto mb-4 animate-pulse" />
            <h1 className="text-3xl font-bold text-white mb-4">
              AI-–∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            </h1>
            <p className="text-blue-100 text-lg">
              {analysisSteps[analysisStep]}
            </p>
          </div>
          
          <div className="bg-white rounded-2xl p-8 shadow-lg">
            <div className="space-y-4">
              {analysisSteps.map((step, index) => (
                <div 
                  key={index}
                  className={`flex items-center space-x-3 ${
                    index <= analysisStep ? 'text-blue-600' : 'text-gray-400'
                  }`}
                >
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                    index < analysisStep ? 'bg-green-500 text-white' : 
                    index === analysisStep ? 'bg-blue-500 text-white animate-pulse' : 
                    'bg-gray-200'
                  }`}>
                    {index < analysisStep ? <CheckCircle className="h-4 w-4" /> : index + 1}
                  </div>
                  <span className={index <= analysisStep ? 'font-medium' : ''}>
                    {step}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <div className="max-w-6xl w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-4 rounded-2xl w-fit mx-auto mb-6">
            <Sparkles className="h-12 w-12 text-white" />
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CFO-AI!
          </h1>
          <p className="text-xl text-gray-600">
            –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
          </p>
        </div>

        {/* Analysis Results */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Industry Info */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Target className="h-6 w-6 mr-2" />
                –í–∞—à–∞ –æ—Ç—Ä–∞—Å–ª—å: {selectedIndustry?.name}
              </CardTitle>
              <CardDescription>
                {selectedIndustry?.description}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:</span>
                  <Badge variant="outline">
                    {Math.round((selectedIndustry?.characteristics.seasonality || 0) * 100)}%      
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:</span>
                  <Badge variant="outline">
                    {Math.round((selectedIndustry?.characteristics.volatility || 0) * 100)}%
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">DSO:</span>
                  <Badge variant="outline">
                    {selectedIndustry?.characteristics.dso || 0} –¥–Ω–µ–π
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Key Metrics */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <BarChart3 className="h-6 w-6 mr-2" />
                –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫:</span>
                  <span className="font-semibold text-green-600">
                    {kpiMetrics?.cashFlow.toLocaleString()} ‚ÇΩ
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Burn Rate:</span>
                  <span className="font-semibold">
                    {kpiMetrics?.burnRate.toLocaleString()} ‚ÇΩ/–º–µ—Å
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Runway:</span>
                  <span className="font-semibold">
                    {kpiMetrics?.runway && isFinite(kpiMetrics.runway) 
                      ? `${kpiMetrics.runway} –º–µ—Å—è—Ü–µ–≤` 
                      : '–ù/–î'}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">–†–∏—Å–∫:</span>
                  <Badge 
                    variant="outline" 
                    className={getRiskColor(kpiMetrics?.riskScore || 0)}
                  >
                    {getRiskLabel(kpiMetrics?.riskScore || 0)}
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* AI Insights */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Brain className="h-6 w-6 mr-2" />
              AI-–∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-green-600 mb-3 flex items-center">
                  <CheckCircle className="h-5 w-5 mr-2" />
                  –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
                </h4>
                <ul className="space-y-2">
                  {aiAnalysis?.insights.slice(0, 2).map((insight, index) => (
                    <li key={index} className="text-sm text-gray-600 flex items-start">
                      <span className="text-green-500 mr-2">‚Ä¢</span>
                      <div>
                        <div className="font-semibold">{insight.title}</div>
                        <div className="text-xs text-gray-500 mt-1">{insight.description}</div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h4 className="font-semibold text-blue-600 mb-3 flex items-center">
                  <Lightbulb className="h-5 w-5 mr-2" />
                  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                </h4>
                <ul className="space-y-2">
                  {aiAnalysis?.recommendations.slice(0, 2).map((rec, index) => (
                    <li key={index} className="text-sm text-gray-600 flex items-start">
                      <span className="text-blue-500 mr-2">‚Ä¢</span>
                      <div>
                        <div className="font-semibold">{rec.title}</div>
                        <div className="text-xs text-gray-500 mt-1">{rec.description}</div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Quick Actions */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Zap className="h-6 w-6 mr-2" />
              –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </CardTitle>
            <CardDescription>
              –ù–∞—á–Ω–∏—Ç–µ —Å —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Button 
                variant="outline" 
                className="h-auto p-4 flex flex-col items-center space-y-2"
                onClick={() => setCurrentPage('dashboard')}
              >
                <BarChart3 className="h-8 w-8 text-blue-600" />
                <span className="font-semibold">–ü—Ä–æ–≥–Ω–æ–∑ –î–î–°</span>
                <span className="text-sm text-gray-600">–ê–Ω–∞–ª–∏–∑ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤</span>
              </Button>
              <Button 
                variant="outline" 
                className="h-auto p-4 flex flex-col items-center space-y-2"
                onClick={() => setCurrentPage('dashboard')}
              >
                <Target className="h-8 w-8 text-green-600" />
                <span className="font-semibold">–°—Ü–µ–Ω–∞—Ä–∏–∏</span>
                <span className="text-sm text-gray-600">–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
              </Button>
              <Button 
                variant="outline" 
                className="h-auto p-4 flex flex-col items-center space-y-2"
                onClick={() => setCurrentPage('dashboard')}
              >
                <TrendingUp className="h-8 w-8 text-purple-600" />
                <span className="font-semibold">–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
                <span className="text-sm text-gray-600">–ü–æ–¥–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</span>
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Continue Button */}
        <div className="text-center">
          <Button 
            onClick={handleContinue}
            size="lg" 
            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8 py-4 text-lg font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
          >
            –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∞—à–±–æ—Ä–¥—É
            <ArrowRight className="ml-2 h-5 w-5" />
          </Button>
        </div>
      </div>
    </div>
  );
}
